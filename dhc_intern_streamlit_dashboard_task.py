# -*- coding: utf-8 -*-
"""DHC-INTERN--STREAMLIT DASHBOARD TASK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OwE5r8Dt7o_QouZd6IDu6qttdIQ9AKIw

# **Step 1 — Import Required Libraries**

Develop an interactive Streamlit dashboard for analyzing Sales, Profit, and Segment-wise performance using the Global Superstore dataset.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
import plotly.express as px

"""# **Step 2 — Load Dataset**"""

st.set_page_config(page_title="Global Superstore Dashboard", layout="wide")

@st.cache_data
def load_data():
    df = pd.read_csv("Global_Superstore2.csv", encoding='latin1')
    return df

df = load_data()
st.subheader("Raw Data Preview")
st.dataframe(df.head())

"""# **Step 3 — Data Cleaning**
 Purpose:

Identifies and handles missing values

Removes duplicates

Converts dates into datetime format

Adds useful derived columns (Year, Month)
"""

# Check for missing values
st.write("### Missing Values in Dataset")
st.dataframe(df.isnull().sum())

# Drop duplicates
df = df.drop_duplicates()

# Handle missing postal codes or others (if any)
df["Postal Code"] = df["Postal Code"].fillna(0)

# Convert date columns
df["Order Date"] = pd.to_datetime(df["Order Date"], errors='coerce')
df["Ship Date"] = pd.to_datetime(df["Ship Date"], errors='coerce')

# Extract useful time-based columns
df["Year"] = df["Order Date"].dt.year
df["Month"] = df["Order Date"].dt.month_name()

"""# **Step 4 — Exploratory Data Analysis (EDA)**
Purpose:
Perform basic EDA to:

Understand dataset structure

View total sales & profit

See distribution by Category and Region
"""

st.subheader("🔎 Exploratory Data Analysis")

# Basic stats
st.write("**Dataset Shape:**", df.shape)
st.write("**Columns:**", df.columns.tolist())

# Summary statistics
st.write("### Descriptive Statistics")
st.dataframe(df.describe())

# Sales & Profit Overview
st.write("### Total Sales and Profit Overview")
col1, col2 = st.columns(2)
col1.metric("Total Sales", f"${df['Sales'].sum():,.2f}")
col2.metric(" Total Profit", f"${df['Profit'].sum():,.2f}")

# Sales by Category
fig_cat = px.bar(df.groupby("Category")["Sales"].sum().reset_index(),
                 x="Category", y="Sales", color="Category", title="Sales by Category")
st.plotly_chart(fig_cat, use_container_width=True)

# Profit by Region
fig_reg = px.bar(df.groupby("Region")["Profit"].sum().reset_index(),
                 x="Region", y="Profit", color="Region", title="Profit by Region")
st.plotly_chart(fig_reg, use_container_width=True)

"""# **Step 5 — Sidebar Filters for Interactivity**"""

st.sidebar.header("🎛️ Filter Data")

region = st.sidebar.multiselect(
    "Select Region", df["Region"].unique(), default=df["Region"].unique()
)
category = st.sidebar.multiselect(
    "Select Category", df["Category"].unique(), default=df["Category"].unique()
)
sub_category = st.sidebar.multiselect(
    "Select Sub-Category", df["Sub-Category"].unique(), default=df["Sub-Category"].unique()
)

filtered_df = df[
    (df["Region"].isin(region)) &
    (df["Category"].isin(category)) &
    (df["Sub-Category"].isin(sub_category))
]

"""# **Step 6 — Key Metrics (KPIs)**"""

total_sales = round(filtered_df["Sales"].sum(), 2)
total_profit = round(filtered_df["Profit"].sum(), 2)
avg_discount = round(filtered_df["Discount"].mean() * 100, 2)

st.markdown("###  Key Performance Indicators")
col1, col2, col3 = st.columns(3)
col1.metric("Total Sales", f"${total_sales:,.2f}")
col2.metric(" Total Profit", f"${total_profit:,.2f}")
col3.metric(" Avg Discount (%)", f"{avg_discount}")

"""# **Step 7 — Dashboard Visuals**"""

# 1. Sales by Region
fig1 = px.bar(filtered_df.groupby("Region")["Sales"].sum().reset_index(),
              x="Region", y="Sales", color="Region", title="Sales by Region")

# 2. Profit by Category
fig2 = px.pie(filtered_df.groupby("Category")["Profit"].sum().reset_index(),
              values="Profit", names="Category", title="Profit by Category")

# 3. Top 5 Customers
top_customers = (
    filtered_df.groupby("Customer Name")["Sales"]
    .sum()
    .sort_values(ascending=False)
    .head(5)
    .reset_index()
)
fig3 = px.bar(top_customers, x="Customer Name", y="Sales", color="Sales", title="Top 5 Customers")

# 4. Sales Trend
sales_trend = filtered_df.groupby("Order Date")["Sales"].sum().reset_index()
fig4 = px.line(sales_trend, x="Order Date", y="Sales", title="Sales Trend Over Time")

# Display
st.plotly_chart(fig1, use_container_width=True)
st.plotly_chart(fig2, use_container_width=True)
st.plotly_chart(fig3, use_container_width=True)
st.plotly_chart(fig4, use_container_width=True)

"""# **Step 8 — Footer**"""

st.markdown("---")
st.caption("Created by Tazeem Sajid | Streamlit Business Dashboard | Global Superstore Dataset")

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# 
# # --- Load dataset ---
# df = pd.read_csv("Global_Superstore2.csv", encoding='latin1')
# 
# 
# # --- Sidebar filters ---
# st.sidebar.header("Filters")
# region = st.sidebar.multiselect("Region", df["Region"].unique())
# category = st.sidebar.multiselect("Category", df["Category"].unique())
# subcategory = st.sidebar.multiselect("Sub-Category", df["Sub-Category"].unique())
# 
# # --- Apply filters ---
# df_filtered = df.copy()
# if region:
#     df_filtered = df_filtered[df_filtered["Region"].isin(region)]
# if category:
#     df_filtered = df_filtered[df_filtered["Category"].isin(category)]
# if subcategory:
#     df_filtered = df_filtered[df_filtered["Sub-Category"].isin(subcategory)]
# 
# # --- KPIs ---
# total_sales = df_filtered["Sales"].sum()
# total_profit = df_filtered["Profit"].sum()
# 
# st.title("📊 Global Superstore Dashboard")
# st.metric("Total Sales (USD)", f"${total_sales:,.2f}")
# st.metric("Total Profit (USD)", f"${total_profit:,.2f}")
# 
# # --- Charts ---
# col1, col2 = st.columns(2)
# with col1:
#     st.subheader("Sales by Category")
#     st.plotly_chart(px.bar(df_filtered, x="Category", y="Sales", color="Category", title="Sales by Category"))
# 
# with col2:
#     st.subheader("Top 5 Customers by Sales")
#     top_customers = (
#         df_filtered.groupby("Customer Name")["Sales"].sum().nlargest(5).reset_index()
#     )
#     st.plotly_chart(px.bar(top_customers, x="Customer Name", y="Sales", color="Customer Name"))
# 
# st.subheader("Profit by Sub-Category")
# st.plotly_chart(px.bar(df_filtered, x="Sub-Category", y="Profit", color="Category"))
#

!pip install streamlit pyngrok pandas plotly

!ngrok config add-authtoken 32joltKXszx2U1HMzAF7L1M969i_5e6xG7DwQw96nm9GUYDZx

from pyngrok import ngrok

ngrok.kill()
!streamlit run app.py &>/dev/null&
public_url = ngrok.connect(8501)
print("🌍 Streamlit App URL:", public_url)